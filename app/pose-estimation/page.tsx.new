"use client"

import { useState, useRef, useEffect } from "react"
import Image from "next/image"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Slider } from "@/components/ui/slider"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import {
  Home,
  Activity,
  Users,
  MessageSquare,
  BarChart2,
  FileText,
  User,
  Settings,
  LogOut,
  Camera,
  Video,
  VideoOff,
  Mic,
  MicOff,
  PhoneOff,
  Download,
  Upload,
  Maximize2,
  Minimize2,
  Play,
  Pause,
  RotateCcw,
  Share2,
} from "lucide-react"
import { useAuth } from "@/components/auth-provider"
import { VideoCall } from "@/components/video-call"

export default function PoseEstimationPage() {
  const { user, logout } = useAuth()
  const [activeTab, setActiveTab] = useState("live")
  const [isVideoOn, setIsVideoOn] = useState(false)
  const [isRecording, setIsRecording] = useState(false)
  const [recordingTime, setRecordingTime] = useState(0)
  const [recordedChunks, setRecordedChunks] = useState<Blob[]>([])
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null)
  const [showSkeleton, setShowSkeleton] = useState(true)
  const [show3D, setShow3D] = useState(false)
  const [showAugmentation, setShowAugmentation] = useState(false)
  const [selectedAugmentation, setSelectedAugmentation] = useState("none")
  const [isVideoCallActive, setIsVideoCallActive] = useState(false)
  const [isVideoCallMinimized, setIsVideoCallMinimized] = useState(false)
  const [detectionQuality, setDetectionQuality] = useState(75)
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const recordingTimerRef = useRef<NodeJS.Timeout | null>(null)
  const [isModelLoaded, setIsModelLoaded] = useState(false)
  const [isModelLoading, setIsModelLoading] = useState(false)
  const [fps, setFps] = useState(0)
  const [poseData, setPoseData] = useState<any>(null)
  const [selectedFile, setSelectedFile] = useState<File | null>(null)
  const [isUploading, setIsUploading] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(0)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // Start webcam
  const startWebcam = async () => {
    try {
      setIsModelLoading(true)
      const stream = await navigator.mediaDevices.getUserMedia({ video: true })
      if (videoRef.current) {
        videoRef.current.srcObject = stream
        videoRef.current.onloadedmetadata = () => {
          videoRef.current?.play()
          setIsVideoOn(true)

          // Simulate model loading
          setTimeout(() => {
            setIsModelLoaded(true)
            setIsModelLoading(false)
            startPoseDetection()
          }, 2000)
        }
      }
    } catch (error) {
      console.error("Error accessing webcam:", error)
      setIsModelLoading(false)
    }
  }

  // Stop webcam
  const stopWebcam = () => {
    if (videoRef.current && videoRef.current.srcObject) {
      const stream = videoRef.current.srcObject as MediaStream
      const tracks = stream.getTracks()
      tracks.forEach(track => track.stop())
      videoRef.current.srcObject = null
      setIsVideoOn(false)
    }
  }

  // Format recording time
  const formatRecordingTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }

  // Toggle recording
  const toggleRecording = () => {
    if (!isVideoOn || !videoRef.current?.srcObject) return;

    if (isRecording) {
      // Stop recording
      if (mediaRecorder && mediaRecorder.state !== 'inactive') {
        mediaRecorder.stop();
      }

      // Clear timer
      if (recordingTimerRef.current) {
        clearInterval(recordingTimerRef.current);
        recordingTimerRef.current = null;
      }

      setIsRecording(false);
    } else {
      // Start recording
      try {
        const stream = videoRef.current.srcObject as MediaStream;
        const recorder = new MediaRecorder(stream, { mimeType: 'video/webm' });

        const chunks: Blob[] = [];
        recorder.ondataavailable = (e) => {
          if (e.data.size > 0) {
            chunks.push(e.data);
          }
        };

        recorder.onstop = () => {
          // Create a single blob from all chunks
          const blob = new Blob(chunks, { type: 'video/webm' });
          setRecordedChunks([...chunks]);

          // Create download link
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `pose-recording-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.webm`;
          document.body.appendChild(a);
          a.click();

          // Clean up
          setTimeout(() => {
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          }, 100);

          // Reset recording time
          setRecordingTime(0);
        };

        // Start recording
        recorder.start(1000); // Collect data every second
        setMediaRecorder(recorder);

        // Start timer
        setRecordingTime(0);
        recordingTimerRef.current = setInterval(() => {
          setRecordingTime(prev => prev + 1);
        }, 1000);

        setIsRecording(true);
      } catch (error) {
        console.error('Error starting recording:', error);
        alert('Failed to start recording. Please make sure your browser supports MediaRecorder API.');
      }
    }
  }

  // Start pose detection
  const startPoseDetection = () => {
    // In a real implementation, this would initialize OpenPose
    // For demo purposes, we'll simulate pose detection with random data
    const poseDetectionInterval = setInterval(() => {
      if (!isVideoOn) {
        clearInterval(poseDetectionInterval)
        return
      }

      // Simulate FPS
      setFps(Math.floor(Math.random() * 10) + 20)

      // Draw to canvas
      if (canvasRef.current && videoRef.current) {
        const ctx = canvasRef.current.getContext('2d')
        if (ctx) {
          // Match canvas size to video
          canvasRef.current.width = videoRef.current.videoWidth
          canvasRef.current.height = videoRef.current.videoHeight

          // Draw video frame
          ctx.drawImage(videoRef.current, 0, 0)

          if (showSkeleton) {
            // Draw skeleton (simplified for demo)
            drawSkeleton(ctx)
          }
        }
      }
    }, 1000 / 30) // Target 30 FPS

    return () => clearInterval(poseDetectionInterval)
  }

  // Previous keypoints for smooth animation
  const [prevKeypoints, setPrevKeypoints] = useState<any[]>([])

  // Draw skeleton on canvas
  const drawSkeleton = (ctx: CanvasRenderingContext2D) => {
    if (!canvasRef.current) return

    const width = canvasRef.current.width
    const height = canvasRef.current.height

    // Base keypoints positions
    const baseKeypoints = [
      { x: width * 0.5, y: height * 0.1 }, // head
      { x: width * 0.5, y: height * 0.3 }, // neck
      { x: width * 0.4, y: height * 0.4 }, // left shoulder
      { x: width * 0.6, y: height * 0.4 }, // right shoulder
      { x: width * 0.3, y: height * 0.6 }, // left elbow
      { x: width * 0.7, y: height * 0.6 }, // right elbow
      { x: width * 0.25, y: height * 0.75 }, // left wrist
      { x: width * 0.75, y: height * 0.75 }, // right wrist
      { x: width * 0.5, y: height * 0.5 }, // torso
      { x: width * 0.45, y: height * 0.7 }, // left hip
      { x: width * 0.55, y: height * 0.7 }, // right hip
      { x: width * 0.4, y: height * 0.85 }, // left knee
      { x: width * 0.6, y: height * 0.85 }, // right knee
      { x: width * 0.35, y: height * 0.95 }, // left ankle
      { x: width * 0.65, y: height * 0.95 }, // right ankle
    ]

    // Add realistic movement to keypoints
    const time = Date.now() / 1000
    const keypoints = baseKeypoints.map((point, index) => {
      // Different oscillation for different body parts
      let xOffset = 0
      let yOffset = 0

      // Breathing movement for torso
      if (index === 8) { // torso
        yOffset = Math.sin(time * 1.5) * height * 0.005
      }

      // Slight movement for head
      if (index === 0) { // head
        xOffset = Math.sin(time * 0.8) * width * 0.005
        yOffset = Math.sin(time * 1.2) * height * 0.005
      }

      // Arm movement
      if ([4, 5, 6, 7].includes(index)) { // elbows and wrists
        xOffset = Math.sin(time * (index % 2 === 0 ? 1.2 : 1.5)) * width * 0.01
        yOffset = Math.cos(time * (index % 2 === 0 ? 1.0 : 0.8)) * height * 0.01
      }

      // Slight leg movement
      if ([11, 12, 13, 14].includes(index)) { // knees and ankles
        xOffset = Math.sin(time * (index % 2 === 0 ? 0.5 : 0.7)) * width * 0.005
        yOffset = Math.cos(time * (index % 2 === 0 ? 0.6 : 0.4)) * height * 0.005
      }

      return {
        x: point.x + xOffset,
        y: point.y + yOffset
      }
    })

    // Smooth transition between frames
    let smoothKeypoints = keypoints
    if (prevKeypoints.length > 0) {
      smoothKeypoints = keypoints.map((point, i) => {
        return {
          x: prevKeypoints[i].x + (point.x - prevKeypoints[i].x) * 0.3,
          y: prevKeypoints[i].y + (point.y - prevKeypoints[i].y) * 0.3
        }
      })
    }

    // Save current keypoints for next frame
    setPrevKeypoints(smoothKeypoints)

    // Draw keypoints with glow effect
    const drawPoint = (x: number, y: number, radius: number, color: string) => {
      // Outer glow
      const gradient = ctx.createRadialGradient(x, y, 0, x, y, radius * 2);
      gradient.addColorStop(0, color);
      gradient.addColorStop(1, 'rgba(0, 255, 0, 0)');

      ctx.beginPath();
      ctx.arc(x, y, radius * 2, 0, 2 * Math.PI);
      ctx.fillStyle = gradient;
      ctx.fill();

      // Inner point
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, 2 * Math.PI);
      ctx.fillStyle = color;
      ctx.fill();
    };

    // Draw connections with gradient
    const drawConnection = (x1: number, y1: number, x2: number, y2: number, color: string) => {
      const gradient = ctx.createLinearGradient(x1, y1, x2, y2);
      gradient.addColorStop(0, color);
      gradient.addColorStop(1, color);

      ctx.beginPath();
      ctx.moveTo(x1, y1);
      ctx.lineTo(x2, y2);
      ctx.strokeStyle = gradient;
      ctx.lineWidth = 3;
      ctx.stroke();

      // Add glow effect
      ctx.beginPath();
      ctx.moveTo(x1, y1);
      ctx.lineTo(x2, y2);
      ctx.strokeStyle = 'rgba(0, 255, 0, 0.2)';
      ctx.lineWidth = 6;
      ctx.stroke();
    };

    // Define connections for better readability
    const connections = [
      [0, 1], // Head to neck
      [1, 2], // Neck to left shoulder
      [1, 3], // Neck to right shoulder
      [2, 4], // Left shoulder to left elbow
      [3, 5], // Right shoulder to right elbow
      [4, 6], // Left elbow to left wrist
      [5, 7], // Right elbow to right wrist
      [1, 8], // Neck to torso
      [8, 9], // Torso to left hip
      [8, 10], // Torso to right hip
      [9, 11], // Left hip to left knee
      [10, 12], // Right hip to right knee
      [11, 13], // Left knee to left ankle
      [12, 14], // Right knee to right ankle
    ];

    // Draw connections first (so they appear behind points)
    connections.forEach(([i, j]) => {
      drawConnection(
        smoothKeypoints[i].x,
        smoothKeypoints[i].y,
        smoothKeypoints[j].x,
        smoothKeypoints[j].y,
        '#00ff00'
      );
    });

    // Draw keypoints
    smoothKeypoints.forEach((point, i) => {
      // Different sizes for different joints
      let radius = 4;
      if ([0].includes(i)) radius = 5; // Head
      if ([1, 8].includes(i)) radius = 4.5; // Neck, torso
      if ([2, 3, 9, 10].includes(i)) radius = 4; // Shoulders, hips

      // Different colors based on body part
      let color = '#00ff00';
      if (show3D) {
        // In 3D mode, use depth-based coloring
        const depthValue = Math.sin(Date.now() / 1000 + i) * 0.5 + 0.5; // 0-1 value
        const r = Math.round(depthValue * 255);
        const g = Math.round(255 - depthValue * 100);
        const b = Math.round(depthValue * 100);
        color = `rgb(${r}, ${g}, ${b})`;
      }

      drawPoint(point.x, point.y, radius, color);
    });

    // Add augmentation if enabled
    if (showAugmentation) {
      // Example: Add a hat on the head
      const headX = smoothKeypoints[0].x;
      const headY = smoothKeypoints[0].y;
      const hatWidth = width * 0.1;
      const hatHeight = height * 0.05;

      ctx.fillStyle = '#ff5500';
      ctx.beginPath();
      ctx.ellipse(headX, headY - hatHeight * 0.5, hatWidth * 0.5, hatHeight * 0.5, 0, 0, Math.PI * 2);
      ctx.fill();

      // Add more augmentations based on selectedAugmentation
      if (selectedAugmentation === 'sword') {
        // Draw a sword in the right hand
        const handX = smoothKeypoints[7].x;
        const handY = smoothKeypoints[7].y;
        const swordLength = height * 0.2;

        ctx.strokeStyle = '#silver';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.moveTo(handX, handY);
        ctx.lineTo(handX + swordLength * 0.7, handY - swordLength * 0.7);
        ctx.stroke();

        // Sword handle
        ctx.strokeStyle = '#brown';
        ctx.lineWidth = 5;
        ctx.beginPath();
        ctx.moveTo(handX, handY);
        ctx.lineTo(handX - 10, handY + 10);
        ctx.stroke();
      }
    }

    // Store pose data for analysis with confidence scores
    const poseWithConfidence = smoothKeypoints.map((point, i) => ({
      ...point,
      confidence: 0.7 + Math.random() * 0.3, // Simulate confidence scores between 0.7-1.0
      part: ['head', 'neck', 'leftShoulder', 'rightShoulder', 'leftElbow', 'rightElbow',
             'leftWrist', 'rightWrist', 'torso', 'leftHip', 'rightHip', 'leftKnee',
             'rightKnee', 'leftAnkle', 'rightAnkle'][i]
    }));

    setPoseData(poseWithConfidence);
  }

  // Start video call
  const startVideoCall = () => {
    setIsVideoCallActive(true)
  }

  // End video call
  const endVideoCall = () => {
    setIsVideoCallActive(false)
    setIsVideoCallMinimized(false)
  }

  // Toggle video call minimized state
  const toggleVideoCallMinimized = () => {
    setIsVideoCallMinimized(!isVideoCallMinimized)
  }

  // Handle file selection
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (files && files.length > 0) {
      const file = files[0]
      // Check file size (max 100MB)
      if (file.size > 100 * 1024 * 1024) {
        alert("File size exceeds 100MB limit. Please select a smaller file.")
        return
      }

      setSelectedFile(file)
      // Reset the file input so the same file can be selected again
      if (fileInputRef.current) {
        fileInputRef.current.value = ""
      }
    }
  }

  // Handle file upload and analysis
  const handleUploadAndAnalyze = async () => {
    if (!selectedFile) {
      alert("Please select a video file first.")
      return
    }

    setIsUploading(true)
    setUploadProgress(0)

    // Simulate upload progress
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        const newProgress = prev + Math.random() * 10
        return newProgress >= 100 ? 100 : newProgress
      })
    }, 300)

    // Simulate API call to upload and process the video
    try {
      // In a real app, this would be an API call to upload the file
      await new Promise(resolve => setTimeout(resolve, 3000))

      clearInterval(interval)
      setUploadProgress(100)

      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 1000))

      // Success message
      alert("Video uploaded and processed successfully! View the results in the Previous Analyses section.")

      // Reset state
      setSelectedFile(null)
    } catch (error) {
      console.error("Error uploading video:", error)
      alert("An error occurred while uploading the video. Please try again.")
    } finally {
      setIsUploading(false)
      clearInterval(interval)
    }
  }

  // Clean up on unmount
  useEffect(() => {
    return () => {
      // Stop webcam
      stopWebcam()

      // Stop recording if active
      if (isRecording && mediaRecorder && mediaRecorder.state !== 'inactive') {
        mediaRecorder.stop()
      }

      // Clear recording timer
      if (recordingTimerRef.current) {
        clearInterval(recordingTimerRef.current)
      }
    }
  }, [isRecording, mediaRecorder])

  // Add event listener for drag and drop
  useEffect(() => {
    const dropArea = document.getElementById('drop-area')

    const handleDragOver = (e: DragEvent) => {
      e.preventDefault()
      e.stopPropagation()
      if (dropArea) dropArea.classList.add('border-blue-500')
    }

    const handleDragLeave = (e: DragEvent) => {
      e.preventDefault()
      e.stopPropagation()
      if (dropArea) dropArea.classList.remove('border-blue-500')
    }

    const handleDrop = (e: DragEvent) => {
      e.preventDefault()
      e.stopPropagation()
      if (dropArea) dropArea.classList.remove('border-blue-500')

      if (e.dataTransfer?.files && e.dataTransfer.files.length > 0) {
        const file = e.dataTransfer.files[0]
        if (file.type.startsWith('video/')) {
          // Check file size (max 100MB)
          if (file.size > 100 * 1024 * 1024) {
            alert("File size exceeds 100MB limit. Please select a smaller file.")
            return
          }
          setSelectedFile(file)
        } else {
          alert("Please select a video file.")
        }
      }
    }

    if (dropArea) {
      dropArea.addEventListener('dragover', handleDragOver)
      dropArea.addEventListener('dragleave', handleDragLeave)
      dropArea.addEventListener('drop', handleDrop)
    }

    return () => {
      if (dropArea) {
        dropArea.removeEventListener('dragover', handleDragOver)
        dropArea.removeEventListener('dragleave', handleDragLeave)
        dropArea.removeEventListener('drop', handleDrop)
      }
    }
  }, [])
